{
  "$schema": "../../schemas/force-schema.json",
  "id": "force_pattern_generator",
  "name": "Force Pattern Generator",
  "description": "Generates new Force patterns based on workflow specifications, creating reusable development patterns with proper structure and documentation.",
  "category": "implementation",
  "version": "1.0.0",
  "metadata": {
    "author": "Force System",
    "created": "2025-07-02T00:00:00Z",
    "updated": "2025-07-02T00:00:00Z",
    "tags": ["generator", "pattern-creation", "workflow", "reusability"]
  },
  "parameters": {
    "type": "object",
    "properties": {
      "pattern_id": {
        "type": "string",
        "description": "Unique identifier for the pattern",
        "pattern": "^[a-z0-9_]+$"
      },
      "pattern_name": {
        "type": "string",
        "description": "Human-readable name for the pattern"
      },
      "description": {
        "type": "string",
        "description": "Detailed description of what the pattern accomplishes"
      },
      "category": {
        "type": "string",
        "description": "Category for the pattern",
        "enum": ["workflow", "documentation", "deployment", "testing", "architecture", "development", "maintenance"]
      },
      "when_to_use": {
        "type": "string",
        "description": "Description of when this pattern should be applied"
      },
      "benefits": {
        "type": "array",
        "description": "List of benefits this pattern provides",
        "items": {"type": "string"},
        "default": []
      },
      "trade_offs": {
        "type": "array",
        "description": "List of trade-offs or considerations",
        "items": {"type": "string"},
        "default": []
      },
      "anti_patterns": {
        "type": "array",
        "description": "List of anti-patterns this pattern helps avoid",
        "items": {"type": "string"},
        "default": []
      },
      "steps": {
        "type": "array",
        "description": "Ordered list of steps to execute the pattern",
        "items": {"type": "string"},
        "default": []
      },
      "executable_steps": {
        "type": "array",
        "description": "Executable tool-based steps for the pattern",
        "items": {
          "type": "object",
          "properties": {
            "name": {"type": "string"},
            "toolId": {"type": "string"},
            "parameters": {"type": "object"}
          }
        },
        "default": []
      },
      "examples": {
        "type": "array",
        "description": "Example use cases or implementations",
        "items": {"type": "object"},
        "default": []
      },
      "output_directory": {
        "type": "string",
        "description": "Directory to save the generated pattern",
        "default": "patterns"
      }
    },
    "required": ["pattern_id", "pattern_name", "description", "category"]
  },
  "implementation": {
    "type": "python",
    "executor": "force.tool_executor.execute_python_tool",
    "code": [
      "import os",
      "import json",
      "import re",
      "from pathlib import Path",
      "from datetime import datetime, timezone",
      "",
      "def execute(parameters, context):",
      "    \"\"\"Generate a new Force pattern definition.\"\"\"",
      "    pattern_id = parameters['pattern_id']",
      "    pattern_name = parameters['pattern_name']",
      "    description = parameters['description']",
      "    category = parameters['category']",
      "    when_to_use = parameters.get('when_to_use', f'When you need to apply {pattern_name.lower()}')",
      "    benefits = parameters.get('benefits', [])",
      "    trade_offs = parameters.get('trade_offs', [])",
      "    anti_patterns = parameters.get('anti_patterns', [])",
      "    steps = parameters.get('steps', [])",
      "    executable_steps = parameters.get('executable_steps', [])",
      "    examples = parameters.get('examples', [])",
      "    output_dir = parameters.get('output_directory', 'patterns')",
      "    ",
      "    # Validate pattern_id format",
      "    if not re.match(r'^[a-z0-9_]+$', pattern_id):",
      "        return {'success': False, 'error': 'pattern_id must contain only lowercase letters, numbers, and underscores'}",
      "    ",
      "    # Set default values if not provided",
      "    if not benefits:",
      "        benefits = [",
      "            'Improved consistency',",
      "            'Reduced development time',",
      "            'Better maintainability'",
      "        ]",
      "    ",
      "    if not steps:",
      "        steps = [",
      "            'Analyze the current situation',",
      "            'Plan the implementation approach',",
      "            'Execute the necessary actions',",
      "            'Validate the results',",
      "            'Document the outcome'",
      "        ]",
      "    ",
      "    # Create implementation section",
      "    implementation = {'steps': steps}",
      "    ",
      "    # Add executable steps if provided",
      "    if executable_steps:",
      "        implementation['executable_steps'] = executable_steps",
      "    ",
      "    # Add examples if provided",
      "    if examples:",
      "        implementation['examples'] = examples",
      "    ",
      "    # Create the pattern definition",
      "    pattern_definition = {",
      "        '$schema': '../schemas/force-schema.json',",
      "        'id': pattern_id,",
      "        'name': pattern_name,",
      "        'description': description,",
      "        'category': category,",
      "        'version': '1.0.0',",
      "        'metadata': {",
      "            'author': 'Force Pattern Generator',",
      "            'created': datetime.now(timezone.utc).isoformat(),",
      "            'updated': datetime.now(timezone.utc).isoformat(),",
      "            'tags': [category, 'generated']",
      "        },",
      "        'context': {",
      "            'when_to_use': when_to_use,",
      "            'benefits': benefits,",
      "            'trade_offs': trade_offs,",
      "            'anti_patterns': anti_patterns",
      "        },",
      "        'implementation': implementation",
      "    }",
      "    ",
      "    # Determine output file path",
      "    current_dir = Path.cwd()",
      "    force_dir = current_dir / '.force' if (current_dir / '.force').exists() else current_dir",
      "    output_path = force_dir / output_dir",
      "    output_path.mkdir(parents=True, exist_ok=True)",
      "    ",
      "    pattern_file = output_path / f'{pattern_id}.json'",
      "    ",
      "    # Check if file already exists",
      "    if pattern_file.exists():",
      "        return {",
      "            'success': False,",
      "            'error': f'Pattern file already exists: {pattern_file}',",
      "            'existing_file': str(pattern_file)",
      "        }",
      "    ",
      "    # Write the pattern definition",
      "    with open(pattern_file, 'w') as f:",
      "        json.dump(pattern_definition, f, indent=2)",
      "    ",
      "    return {",
      "        'success': True,",
      "        'message': f'Generated Force pattern: {pattern_name}',",
      "        'pattern_id': pattern_id,",
      "        'pattern_file': str(pattern_file),",
      "        'category': category,",
      "        'has_executable_steps': len(executable_steps) > 0,",
      "        'pattern_definition': pattern_definition",
      "    }"
    ]
  },
  "requirements": {
    "permissions": ["filesystem_write", "filesystem_read"],
    "dependencies": [],
    "runtime": "python3"
  },
  "testing": {
    "test_cases": [
      {
        "name": "generate_basic_workflow_pattern",
        "description": "Generate a basic workflow pattern",
        "parameters": {
          "pattern_id": "test_workflow",
          "pattern_name": "Test Workflow Pattern",
          "description": "A test workflow pattern for validation",
          "category": "workflow"
        },
        "expected_outcome": {
          "success": true,
          "pattern_created": true
        }
      }
    ]
  }
}
