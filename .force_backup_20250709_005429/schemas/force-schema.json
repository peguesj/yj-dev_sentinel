{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://force.agentic.dev/schemas/core/v1.0.0",
  "title": "Force Agentic Development Assistant Schema",
  "description": "Comprehensive schema for agentic development assistance tools, patterns, constraints, and learning mechanisms",
  "version": "1.0.0",
  "type": "object",
  "definitions": {
    "ToolDefinition": {
      "type": "object",
      "description": "Defines a single agentic development tool with execution parameters",
      "required": [
        "id",
        "name",
        "category",
        "description",
        "parameters",
        "execution",
        "metadata"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
          "description": "Unique identifier for the tool in snake_case format"
        },
        "name": {
          "type": "string",
          "minLength": 3,
          "maxLength": 100,
          "description": "Human-readable name for the tool"
        },
        "category": {
          "type": "string",
          "enum": [
            "git",
            "documentation",
            "analysis",
            "implementation",
            "testing",
            "deployment",
            "optimization",
            "validation"
          ],
          "description": "Primary category for tool organization"
        },
        "description": {
          "type": "string",
          "minLength": 10,
          "maxLength": 500,
          "description": "Detailed description of what the tool does and when to use it"
        },
        "parameters": {
          "type": "object",
          "description": "Input parameters required for tool execution",
          "properties": {
            "required": {
              "type": "array",
              "items": { "$ref": "#/definitions/Parameter" },
              "description": "Required parameters for tool execution"
            },
            "optional": {
              "type": "array",
              "items": { "$ref": "#/definitions/Parameter" },
              "description": "Optional parameters with default values"
            }
          }
        },
        "execution": {
          "type": "object",
          "required": ["strategy", "commands", "validation"],
          "properties": {
            "strategy": {
              "type": "string",
              "enum": ["sequential", "parallel", "conditional", "iterative"],
              "description": "Execution strategy for the tool's commands"
            },
            "commands": {
              "type": "array",
              "items": { "$ref": "#/definitions/Command" },
              "minItems": 1,
              "description": "Sequence of commands to execute"
            },
            "validation": {
              "type": "object",
              "description": "Validation rules for successful execution",
              "properties": {
                "pre_conditions": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Conditions that must be met before execution"
                },
                "post_conditions": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Conditions that verify successful execution"
                },
                "error_handling": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/ErrorHandler" },
                  "description": "Error handling strategies"
                }
              }
            }
          }
        },
        "metadata": {
          "type": "object",
          "required": ["created", "updated", "version", "complexity"],
          "properties": {
            "created": {
              "type": "string",
              "format": "date-time",
              "description": "Tool creation timestamp"
            },
            "updated": {
              "type": "string",
              "format": "date-time",
              "description": "Last update timestamp"
            },
            "version": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+\\.\\d+$",
              "description": "Semantic version of the tool"
            },
            "complexity": {
              "type": "string",
              "enum": ["low", "medium", "high", "expert"],
              "description": "Complexity level for execution difficulty"
            },
            "tags": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Tags for tool discovery and organization"
            },
            "dependencies": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Other tools or systems this tool depends on"
            },
            "performance_metrics": {
              "type": "object",
              "description": "Performance and success tracking",
              "properties": {
                "avg_execution_time": { "type": "number" },
                "success_rate": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                "usage_count": { "type": "integer", "minimum": 0 }
              }
            }
          }
        }
      }
    },
    "Parameter": {
      "type": "object",
      "required": ["name", "type", "description"],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
          "description": "Parameter name in snake_case"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "array",
            "object",
            "file_path",
            "directory_path",
            "url",
            "regex"
          ],
          "description": "Parameter data type"
        },
        "description": {
          "type": "string",
          "minLength": 5,
          "description": "Description of the parameter's purpose"
        },
        "default": {
          "description": "Default value for optional parameters"
        },
        "validation": {
          "type": "object",
          "description": "Validation rules for the parameter",
          "properties": {
            "pattern": { "type": "string" },
            "min_length": { "type": "integer" },
            "max_length": { "type": "integer" },
            "enum": { "type": "array" },
            "custom_validator": { "type": "string" }
          }
        }
      }
    },
    "Command": {
      "type": "object",
      "required": ["action", "description"],
      "properties": {
        "action": {
          "type": "string",
          "description": "The command or action to execute"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of what this command does"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters to pass to this specific command"
        },
        "condition": {
          "type": "string",
          "description": "Optional condition that must be met for this command to execute"
        },
        "retry_policy": {
          "type": "object",
          "properties": {
            "max_attempts": { "type": "integer", "minimum": 1 },
            "backoff_strategy": {
              "type": "string",
              "enum": ["linear", "exponential", "fixed"]
            },
            "retry_delay": { "type": "number", "minimum": 0 }
          }
        }
      }
    },
    "ErrorHandler": {
      "type": "object",
      "required": ["error_type", "strategy"],
      "properties": {
        "error_type": {
          "type": "string",
          "description": "Type of error this handler addresses"
        },
        "strategy": {
          "type": "string",
          "enum": ["retry", "fallback", "skip", "abort", "manual_intervention"],
          "description": "Strategy for handling this error type"
        },
        "action": {
          "type": "string",
          "description": "Specific action to take when this error occurs"
        },
        "escalation": {
          "type": "boolean",
          "description": "Whether to escalate the error if handling fails"
        }
      }
    },
    "Pattern": {
      "type": "object",
      "required": ["id", "name", "description", "context", "implementation"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
          "description": "Unique pattern identifier"
        },
        "name": {
          "type": "string",
          "description": "Human-readable pattern name"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the pattern and its benefits"
        },
        "context": {
          "type": "object",
          "required": ["when_to_use", "benefits", "trade_offs"],
          "properties": {
            "when_to_use": { "type": "string" },
            "benefits": { "type": "array", "items": { "type": "string" } },
            "trade_offs": { "type": "array", "items": { "type": "string" } },
            "anti_patterns": { "type": "array", "items": { "type": "string" } }
          }
        },
        "implementation": {
          "type": "object",
          "required": ["steps", "examples"],
          "properties": {
            "steps": { "type": "array", "items": { "type": "string" } },
            "examples": { "type": "array", "items": { "type": "object" } },
            "code_templates": { "type": "array", "items": { "type": "object" } }
          }
        }
      }
    },
    "Constraint": {
      "type": "object",
      "required": ["id", "type", "description", "enforcement"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
          "description": "Unique constraint identifier"
        },
        "type": {
          "type": "string",
          "enum": [
            "code_quality",
            "performance",
            "security",
            "documentation",
            "testing",
            "architecture",
            "business_rule"
          ],
          "description": "Type of constraint being enforced"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the constraint and its purpose"
        },
        "enforcement": {
          "type": "object",
          "required": ["level", "validation_rules"],
          "properties": {
            "level": {
              "type": "string",
              "enum": ["error", "warning", "suggestion", "info"],
              "description": "Enforcement level for the constraint"
            },
            "validation_rules": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Rules that define when the constraint is violated"
            },
            "auto_fix": {
              "type": "boolean",
              "description": "Whether this constraint can be automatically fixed"
            },
            "fix_commands": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Commands to automatically fix constraint violations"
            }
          }
        }
      }
    },
    "GovernancePolicy": {
      "type": "object",
      "required": [
        "id",
        "name",
        "category",
        "description",
        "policy_type",
        "enforcement",
        "scope",
        "metadata"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
          "description": "Unique identifier for the governance policy"
        },
        "name": {
          "type": "string",
          "minLength": 3,
          "maxLength": 100,
          "description": "Human-readable name for the governance policy"
        },
        "category": {
          "type": "string",
          "enum": [
            "security",
            "compliance",
            "quality",
            "performance",
            "accessibility",
            "maintainability"
          ],
          "description": "Category of governance policy"
        },
        "description": {
          "type": "string",
          "minLength": 10,
          "maxLength": 500,
          "description": "Detailed description of the governance policy"
        },
        "policy_type": {
          "type": "string",
          "enum": ["mandatory", "recommended", "advisory"],
          "description": "Enforcement level of the policy"
        },
        "enforcement": {
          "type": "object",
          "required": ["level", "validation_rules"],
          "properties": {
            "level": {
              "type": "string",
              "enum": ["blocking", "warning", "info"],
              "description": "How strictly to enforce this policy"
            },
            "validation_rules": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Rules to validate compliance with this policy"
            },
            "auto_fix": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Commands to automatically fix policy violations"
            }
          }
        },
        "scope": {
          "type": "object",
          "properties": {
            "applies_to": {
              "type": "array",
              "items": { "type": "string" },
              "description": "What this policy applies to (tools, patterns, etc.)"
            },
            "exceptions": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Exceptions to this policy"
            }
          }
        },
        "metadata": {
          "type": "object",
          "required": ["created", "updated", "version"],
          "properties": {
            "created": { "type": "string", "format": "date-time" },
            "updated": { "type": "string", "format": "date-time" },
            "version": { "type": "string" },
            "author": { "type": "string" },
            "tags": { "type": "array", "items": { "type": "string" } },
            "priority": {
              "type": "string",
              "enum": ["critical", "high", "medium", "low"],
              "default": "medium"
            }
          }
        }
      }
    },
    "LearningRecord": {
      "type": "object",
      "required": ["id", "event_type", "context", "outcome", "timestamp"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the learning record"
        },
        "event_type": {
          "type": "string",
          "enum": [
            "tool_execution",
            "pattern_application",
            "constraint_violation",
            "error_resolution",
            "optimization"
          ],
          "description": "Type of event that generated this learning record"
        },
        "context": {
          "type": "object",
          "description": "Context information about the event",
          "properties": {
            "project_phase": { "type": "string" },
            "tools_used": { "type": "array", "items": { "type": "string" } },
            "complexity_level": { "type": "string" },
            "team_size": { "type": "integer" }
          }
        },
        "outcome": {
          "type": "object",
          "required": ["success", "metrics"],
          "properties": {
            "success": { "type": "boolean" },
            "metrics": { "type": "object" },
            "lessons_learned": {
              "type": "array",
              "items": { "type": "string" }
            },
            "improvements_suggested": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When this learning event occurred"
        }
      }
    }
  },
  "properties": {
    "tools": {
      "type": "array",
      "items": { "$ref": "#/definitions/ToolDefinition" },
      "description": "Collection of agentic development tools"
    },
    "patterns": {
      "type": "array",
      "items": { "$ref": "#/definitions/Pattern" },
      "description": "Collection of development patterns and best practices"
    },
    "constraints": {
      "type": "array",
      "items": { "$ref": "#/definitions/Constraint" },
      "description": "Collection of development constraints and rules"
    },
    "learning_records": {
      "type": "array",
      "items": { "$ref": "#/definitions/LearningRecord" },
      "description": "Historical learning data for continuous improvement"
    }
  }
}
