{
  "id": "atomic_commit_workflow",
  "name": "Atomic Commit Workflow Pattern",
  "category": "git",
  "description": "Ensures granular, logical commits by staging and committing iteratively rather than staging everything at once. Each commit represents a single logical change with clear purpose and scope.",
  "context": {
    "when_to_use": "When working with multiple files and changes that represent different logical units of work. Essential for maintaining clean git history and enabling precise rollbacks.",
    "benefits": [
      "Each commit has a single, clear purpose",
      "Easier to review individual changes",
      "Precise rollback capabilities",
      "Better git history readability",
      "Enables selective cherry-picking",
      "Improves debugging with git bisect"
    ],
    "trade_offs": [
      "Requires more deliberate staging process",
      "Takes longer than bulk commits",
      "Needs careful planning of commit boundaries"
    ],
    "anti_patterns": [
      "Staging all changes at once with git add .",
      "Making commits with mixed unrelated changes",
      "Using generic commit messages like 'fix stuff'",
      "Committing work-in-progress without logical boundaries"
    ]
  },
  "implementation": {
    "steps": [
      "Identify logical groupings of changes (by feature, component, or purpose)",
      "Plan commit sequence from most fundamental to most dependent",
      "Stage first logical group only (git add specific-files)",
      "Write descriptive commit message following conventional commits",
      "Commit the staged changes (git commit -m 'message')",
      "Repeat staging and committing for each logical group",
      "Verify final git log shows clear, atomic commits"
    ],
    "executable_steps": [
      {
        "name": "Analyze changes for logical groupings",
        "toolId": "git_status_analyzer",
        "parameters": {
          "format": "grouped"
        },
        "optional": true
      },
      {
        "name": "Stage first logical group",
        "toolId": "git_selective_stage",
        "parameters": {
          "scope": "logical_group_1"
        },
        "optional": false
      },
      {
        "name": "Create atomic commit with descriptive message",
        "toolId": "git_atomic_commit",
        "parameters": {
          "message_type": "conventional"
        },
        "optional": false
      },
      {
        "name": "Repeat for remaining groups iteratively",
        "toolId": "git_iterative_commit",
        "parameters": {
          "strategy": "one_group_at_a_time"
        },
        "optional": false
      }
    ],
    "examples": []
  },
  "examples": [
    {
      "scenario": "Documentation update with multiple components",
      "bad_approach": "git add . && git commit -m 'update docs'",
      "good_approach": [
        "git add README.md && git commit -m 'docs: enhance README with MCP integration guide'",
        "git add .force/schemas/ && git commit -m 'feat: implement extended schema system'",
        "git add force/tools/system/ && git commit -m 'feat: add Force component generators'",
        "git add docs/integration/ && git commit -m 'docs: add comprehensive integration guides'"
      ]
    }
  ],
  "validation": {
    "commit_quality_checks": [
      "Each commit has single logical purpose",
      "Commit messages follow conventional commit format",
      "No mixed unrelated changes in single commit",
      "Each commit is self-contained and buildable"
    ],
    "git_history_checks": [
      "git log --oneline shows clear progression",
      "Each commit can be understood in isolation",
      "Commit sequence tells coherent story"
    ]
  },
  "metadata": {
    "created": "2025-07-02T16:15:00Z",
    "updated": "2025-07-02T16:15:00Z",
    "version": "1.0.0",
    "complexity": "medium",
    "tags": [
      "git",
      "workflow",
      "commits",
      "atomic",
      "best-practices"
    ],
    "author": "Force Learning System",
    "learning_source": "Real-world Force MCP stdio documentation workflow",
    "effectiveness_rating": "high"
  }
}