{
  "$schema": "../../schemas/force-schema.json",
  "id": "force_mcp_component_generator",
  "name": "Force MCP Component Generator",
  "description": "Generates complete Force component sets (tools, patterns, constraints) for MCP integration, creating structured development environments with proper schema validation.",
  "category": "implementation",
  "version": "1.0.0",
  "metadata": {
    "author": "Force System",
    "created": "2025-07-02T00:00:00Z",
    "updated": "2025-07-02T00:00:00Z",
    "tags": ["generator", "mcp", "integration", "component-creation"]
  },
  "parameters": {
    "type": "object",
    "properties": {
      "component_type": {
        "type": "string",
        "description": "Type of Force component to generate",
        "enum": ["tool", "pattern", "constraint", "complete_set"]
      },
      "domain": {
        "type": "string",
        "description": "Domain or area of focus for the components",
        "examples": ["git_workflow", "documentation", "testing", "deployment", "security"]
      },
      "use_case": {
        "type": "string",
        "description": "Specific use case or problem the components should address"
      },
      "complexity": {
        "type": "string",
        "description": "Complexity level of generated components",
        "enum": ["basic", "intermediate", "advanced"],
        "default": "intermediate"
      },
      "include_executable_steps": {
        "type": "boolean",
        "description": "Whether patterns should include executable tool steps",
        "default": true
      },
      "auto_fix_constraints": {
        "type": "boolean",
        "description": "Whether constraints should include auto-fix capabilities",
        "default": false
      },
      "output_directory": {
        "type": "string",
        "description": "Base directory for generated components",
        "default": "."
      },
      "component_prefix": {
        "type": "string",
        "description": "Prefix for component IDs",
        "pattern": "^[a-z0-9_]*$",
        "default": ""
      }
    },
    "required": ["component_type", "domain", "use_case"]
  },
  "implementation": {
    "type": "python",
    "executor": "force.tool_executor.execute_python_tool",
    "code": [
      "import os",
      "import json",
      "import re",
      "from pathlib import Path",
      "from datetime import datetime, timezone",
      "",
      "def execute(parameters, context):",
      "    \"\"\"Generate Force components for MCP integration.\"\"\"",
      "    component_type = parameters['component_type']",
      "    domain = parameters['domain']",
      "    use_case = parameters['use_case']",
      "    complexity = parameters.get('complexity', 'intermediate')",
      "    include_executable = parameters.get('include_executable_steps', True)",
      "    auto_fix = parameters.get('auto_fix_constraints', False)",
      "    output_dir = parameters.get('output_directory', '.')",
      "    prefix = parameters.get('component_prefix', '')",
      "    ",
      "    # Sanitize inputs",
      "    domain_clean = re.sub(r'[^a-z0-9_]', '_', domain.lower())",
      "    use_case_clean = re.sub(r'[^a-z0-9_]', '_', use_case.lower())",
      "    ",
      "    # Generate component IDs",
      "    base_id = f'{prefix}{domain_clean}_{use_case_clean}' if prefix else f'{domain_clean}_{use_case_clean}'",
      "    tool_id = f'{base_id}_tool'",
      "    pattern_id = f'{base_id}_pattern'",
      "    constraint_id = f'{base_id}_constraint'",
      "    ",
      "    generated_components = []",
      "    current_dir = Path(output_dir)",
      "    force_dir = current_dir / '.force' if (current_dir / '.force').exists() else current_dir",
      "    ",
      "    # Generate tool if requested",
      "    if component_type in ['tool', 'complete_set']:",
      "        tool_def = generate_tool(tool_id, domain, use_case, complexity)",
      "        tool_path = force_dir / 'tools' / domain_clean",
      "        tool_path.mkdir(parents=True, exist_ok=True)",
      "        tool_file = tool_path / f'{tool_id}.json'",
      "        ",
      "        if not tool_file.exists():",
      "            with open(tool_file, 'w') as f:",
      "                json.dump(tool_def, f, indent=2)",
      "            generated_components.append({",
      "                'type': 'tool',",
      "                'id': tool_id,",
      "                'file': str(tool_file)",
      "            })",
      "    ",
      "    # Generate pattern if requested",
      "    if component_type in ['pattern', 'complete_set']:",
      "        pattern_def = generate_pattern(pattern_id, domain, use_case, complexity, include_executable, tool_id if component_type == 'complete_set' else None)",
      "        pattern_path = force_dir / 'patterns'",
      "        pattern_path.mkdir(parents=True, exist_ok=True)",
      "        pattern_file = pattern_path / f'{pattern_id}.json'",
      "        ",
      "        if not pattern_file.exists():",
      "            with open(pattern_file, 'w') as f:",
      "                json.dump(pattern_def, f, indent=2)",
      "            generated_components.append({",
      "                'type': 'pattern',",
      "                'id': pattern_id,",
      "                'file': str(pattern_file)",
      "            })",
      "    ",
      "    # Generate constraint if requested",
      "    if component_type in ['constraint', 'complete_set']:",
      "        constraint_def = generate_constraint(constraint_id, domain, use_case, complexity, auto_fix)",
      "        constraint_path = force_dir / 'constraints'",
      "        constraint_path.mkdir(parents=True, exist_ok=True)",
      "        constraint_file = constraint_path / f'{constraint_id}.json'",
      "        ",
      "        if not constraint_file.exists():",
      "            with open(constraint_file, 'w') as f:",
      "                json.dump(constraint_def, f, indent=2)",
      "            generated_components.append({",
      "                'type': 'constraint',",
      "                'id': constraint_id,",
      "                'file': str(constraint_file)",
      "            })",
      "    ",
      "    return {",
      "        'success': True,",
      "        'message': f'Generated {len(generated_components)} Force components for {domain} - {use_case}',",
      "        'domain': domain,",
      "        'use_case': use_case,",
      "        'complexity': complexity,",
      "        'component_type': component_type,",
      "        'generated_components': generated_components",
      "    }",
      "",
      "def generate_tool(tool_id, domain, use_case, complexity):",
      "    \"\"\"Generate a tool definition.\"\"\"",
      "    impl_complexity = {",
      "        'basic': ['def execute(parameters, context):', '    return {\"success\": True, \"message\": \"Tool executed\"}'],",
      "        'intermediate': [",
      "            'def execute(parameters, context):',",
      "            '    \"\"\"Execute the tool with validation and error handling.\"\"\"',",
      "            '    try:',",
      "            '        # TODO: Implement tool logic',",
      "            '        result = perform_operation(parameters)',",
      "            '        return {\"success\": True, \"result\": result}',",
      "            '    except Exception as e:',",
      "            '        return {\"success\": False, \"error\": str(e)}',",
      "            '',",
      "            'def perform_operation(parameters):',",
      "            '    \"\"\"Perform the main operation.\"\"\"',",
      "            '    return {\"operation\": \"completed\"}'",
      "        ],",
      "        'advanced': [",
      "            'import asyncio',",
      "            'from typing import Dict, Any, Optional',",
      "            '',",
      "            'async def execute(parameters: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:',",
      "            '    \"\"\"Execute the tool with async support and comprehensive error handling.\"\"\"',",
      "            '    validator = ParameterValidator()',",
      "            '    ',",
      "            '    try:',",
      "            '        # Validate parameters',",
      "            '        validated_params = validator.validate(parameters)',",
      "            '        ',",
      "            '        # Execute with progress tracking',",
      "            '        result = await execute_with_progress(validated_params, context)',",
      "            '        ',",
      "            '        return {',",
      "            '            \"success\": True,',",
      "            '            \"result\": result,',",
      "            '            \"metadata\": {\"execution_time\": result.get(\"duration\", 0)}',",
      "            '        }',",
      "            '    except ValidationError as e:',",
      "            '        return {\"success\": False, \"error\": f\"Validation failed: {e}\"}',",
      "            '    except Exception as e:',",
      "            '        return {\"success\": False, \"error\": f\"Execution failed: {e}\"}',",
      "            '',",
      "            'class ParameterValidator:',",
      "            '    def validate(self, params): return params',",
      "            '',",
      "            'async def execute_with_progress(params, context):',",
      "            '    return {\"status\": \"completed\", \"duration\": 1.5}'",
      "        ]",
      "    }",
      "    ",
      "    return {",
      "        '$schema': '../../schemas/force-schema.json',",
      "        'id': tool_id,",
      "        'name': f'{domain.title()} {use_case.title()} Tool',",
      "        'description': f'Tool for {use_case} in {domain} domain',",
      "        'category': domain.lower(),",
      "        'version': '1.0.0',",
      "        'metadata': {",
      "            'author': 'Force MCP Generator',",
      "            'created': datetime.now(timezone.utc).isoformat(),",
      "            'complexity': complexity,",
      "            'domain': domain",
      "        },",
      "        'parameters': {",
      "            'type': 'object',",
      "            'properties': {",
      "                'target': {'type': 'string', 'description': 'Target for the operation'},",
      "                'options': {'type': 'object', 'description': 'Additional options', 'default': {}}",
      "            },",
      "            'required': ['target']",
      "        },",
      "        'implementation': {",
      "            'type': 'python',",
      "            'executor': 'force.tool_executor.execute_python_tool',",
      "            'code': impl_complexity[complexity]",
      "        },",
      "        'requirements': {",
      "            'permissions': ['filesystem_read'],",
      "            'dependencies': [],",
      "            'runtime': 'python3'",
      "        }",
      "    }",
      "",
      "def generate_pattern(pattern_id, domain, use_case, complexity, include_executable, tool_id=None):",
      "    \"\"\"Generate a pattern definition.\"\"\"",
      "    steps = [",
      "        f'Initialize {domain} environment',",
      "        f'Analyze {use_case} requirements',",
      "        f'Execute {use_case} workflow',",
      "        f'Validate {domain} compliance',",
      "        'Document results and lessons learned'",
      "    ]",
      "    ",
      "    pattern_def = {",
      "        '$schema': '../schemas/force-schema.json',",
      "        'id': pattern_id,",
      "        'name': f'{domain.title()} {use_case.title()} Pattern',",
      "        'description': f'Pattern for implementing {use_case} in {domain} workflows',",
      "        'category': 'workflow',",
      "        'version': '1.0.0',",
      "        'metadata': {",
      "            'author': 'Force MCP Generator',",
      "            'created': datetime.now(timezone.utc).isoformat(),",
      "            'complexity': complexity,",
      "            'domain': domain",
      "        },",
      "        'context': {",
      "            'when_to_use': f'When implementing {use_case} workflows in {domain}',",
      "            'benefits': [",
      "                'Standardized approach',",
      "                'Reduced implementation time',",
      "                'Consistent quality'",
      "            ],",
      "            'trade_offs': ['Initial setup overhead', 'Learning curve']",
      "        },",
      "        'implementation': {'steps': steps}",
      "    }",
      "    ",
      "    # Add executable steps if requested",
      "    if include_executable and tool_id:",
      "        pattern_def['implementation']['executable_steps'] = [",
      "            {",
      "                'name': f'Execute {use_case} tool',",
      "                'toolId': tool_id,",
      "                'parameters': {'target': '{{target}}', 'options': {}}",
      "            }",
      "        ]",
      "    ",
      "    return pattern_def",
      "",
      "def generate_constraint(constraint_id, domain, use_case, complexity, auto_fix):",
      "    \"\"\"Generate a constraint definition.\"\"\"",
      "    return {",
      "        '$schema': '../schemas/force-schema.json',",
      "        'id': constraint_id,",
      "        'name': f'{domain.title()} {use_case.title()} Constraint',",
      "        'description': f'Quality constraint for {use_case} in {domain}',",
      "        'category': 'quality',",
      "        'version': '1.0.0',",
      "        'metadata': {",
      "            'author': 'Force MCP Generator',",
      "            'created': datetime.now(timezone.utc).isoformat(),",
      "            'complexity': complexity,",
      "            'domain': domain",
      "        },",
      "        'validation': {",
      "            'rules': [",
      "                {",
      "                    'name': f'{use_case}_compliance',",
      "                    'description': f'Ensure {use_case} compliance in {domain}',",
      "                    'type': 'custom',",
      "                    'parameters': {'domain': domain, 'use_case': use_case}",
      "                }",
      "            ],",
      "            'severity': 'warning',",
      "            'scope': ['**/*']",
      "        },",
      "        'enforcement': {",
      "            'auto_fix': auto_fix,",
      "            'require_approval': not auto_fix,",
      "            'blocking': False",
      "        }",
      "    }"
    ]
  },
  "requirements": {
    "permissions": ["filesystem_write", "filesystem_read"],
    "dependencies": [],
    "runtime": "python3"
  },
  "testing": {
    "test_cases": [
      {
        "name": "generate_complete_git_workflow_set",
        "description": "Generate a complete set of components for git workflow",
        "parameters": {
          "component_type": "complete_set",
          "domain": "git_workflow",
          "use_case": "automated_commits",
          "complexity": "intermediate"
        },
        "expected_outcome": {
          "success": true,
          "components_generated": 3
        }
      }
    ]
  }
}
