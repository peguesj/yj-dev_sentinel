{
  "$schema": "../schemas/force-schema.json",
  "title": "Git Workflow and Development Management Tools",
  "description": "Comprehensive collection of git-based tools for agentic development workflow management",
  "version": "1.0.0",
  "tools": [
    {
      "id": "grouped_commit_workflow",
      "name": "Grouped Commit Workflow",
      "category": "git",
      "description": "Intelligently groups untracked work based on logical changes and git history, creates granular commits for developer clarity, and applies semantic versioning tags based on change impact weight.",
      "parameters": {
        "required": [],
        "optional": [
          {
            "name": "scope",
            "type": "string",
            "description": "Optional scope to limit commits to specific files or components (e.g., 'ui components', 'backend api', 'documentation')",
            "validation": {
              "pattern": "^[a-zA-Z0-9\\s\\-_]+$",
              "max_length": 50
            }
          },
          {
            "name": "semantic_version_increment",
            "type": "string",
            "description": "Override automatic version increment detection",
            "validation": {
              "enum": ["patch", "minor", "major", "auto"]
            },
            "default": "auto"
          },
          {
            "name": "commit_message_prefix",
            "type": "string",
            "description": "Prefix for commit messages to maintain consistency",
            "default": "",
            "validation": {
              "max_length": 20
            }
          }
        ]
      },
      "execution": {
        "strategy": "sequential",
        "commands": [
          {
            "action": "git status --porcelain",
            "description": "Get current repository status to identify all changes",
            "parameters": {}
          },
          {
            "action": "analyze_changes_by_context",
            "description": "Group changes by logical context using file analysis and git history",
            "parameters": {
              "include_chat_context": true,
              "analyze_file_relationships": true
            }
          },
          {
            "action": "create_granular_commits",
            "description": "Create individual commits for each logical group with descriptive messages",
            "parameters": {
              "use_conventional_commits": true,
              "include_impact_analysis": true
            }
          },
          {
            "action": "determine_version_increment",
            "description": "Analyze cumulative changes to determine appropriate semantic version increment",
            "parameters": {
              "analyze_breaking_changes": true,
              "analyze_new_features": true,
              "analyze_bug_fixes": true
            }
          },
          {
            "action": "apply_semantic_version_tag",
            "description": "Create and push semantic version tag based on change analysis",
            "parameters": {
              "tag_format": "v{major}.{minor}.{patch}",
              "include_release_notes": true
            }
          },
          {
            "action": "deploy_supabase_changes",
            "description": "Deploy any database or Edge Function changes to web Supabase instance",
            "parameters": {
              "require_linked_flag": true,
              "target_instance": "web",
              "verify_deployment": true
            },
            "conditional": "contains_supabase_changes"
          }
        ],
        "validation": {
          "pre_conditions": [
            "working directory has changes",
            "git repository is initialized",
            "user has commit permissions"
          ],
          "post_conditions": [
            "all changes are committed",
            "semantic version tag is applied",
            "git history is clean and logical"
          ],
          "error_handling": [
            {
              "error_type": "merge_conflict",
              "strategy": "manual_intervention",
              "action": "pause execution and request user resolution",
              "escalation": true
            },
            {
              "error_type": "permission_denied",
              "strategy": "abort",
              "action": "check git configuration and user permissions",
              "escalation": true
            },
            {
              "error_type": "no_changes_detected",
              "strategy": "skip",
              "action": "log informational message and exit gracefully",
              "escalation": false
            }
          ]
        }
      },
      "metadata": {
        "created": "2025-06-24T07:47:00Z",
        "updated": "2025-06-24T07:47:00Z",
        "version": "1.0.0",
        "complexity": "medium",
        "tags": ["git", "workflow", "automation", "versioning", "commits"],
        "dependencies": ["git", "semantic-release"],
        "performance_metrics": {
          "avg_execution_time": 45.5,
          "success_rate": 0.95,
          "usage_count": 0
        }
      }
    },
    {
      "id": "documentation_sync_commit",
      "name": "Documentation Synchronization Commit",
      "category": "documentation",
      "description": "Synchronizes documentation changes with code changes, ensuring documentation updates are properly tracked and linked to implementation changes through cross-references and anchors.",
      "parameters": {
        "required": [
          {
            "name": "implementation_phase",
            "type": "string",
            "description": "Current implementation phase for documentation context",
            "validation": {
              "enum": ["foundation", "core_features", "ai_enhancement", "advanced_features", "launch"]
            }
          }
        ],
        "optional": [
          {
            "name": "update_changelog",
            "type": "boolean",
            "description": "Whether to automatically update the changelog with timestamp and references",
            "default": true
          },
          {
            "name": "cross_reference_anchors",
            "type": "boolean",
            "description": "Whether to update cross-reference anchors between documents",
            "default": true
          }
        ]
      },
      "execution": {
        "strategy": "sequential",
        "commands": [
          {
            "action": "scan_documentation_changes",
            "description": "Identify all documentation file changes and categorize them",
            "parameters": {
              "include_markdown_files": true,
              "include_schema_files": true,
              "analyze_cross_references": true
            }
          },
          {
            "action": "update_changelog_entries",
            "description": "Add timestamped entries to changelog with implementation references",
            "parameters": {
              "timestamp_format": "YYYY-MM-DD HH:mm PST",
              "include_file_listings": true,
              "include_impact_metrics": true
            }
          },
          {
            "action": "validate_cross_references",
            "description": "Verify all internal links and anchors are functional",
            "parameters": {
              "check_markdown_links": true,
              "validate_anchor_targets": true,
              "report_broken_links": true
            }
          },
          {
            "action": "commit_documentation_batch",
            "description": "Create comprehensive commit for all documentation changes",
            "parameters": {
              "commit_message_template": "docs: {category} - {summary}\\n\\n{detailed_changes}",
              "include_file_count": true,
              "group_by_category": true
            }
          }
        ],
        "validation": {
          "pre_conditions": [
            "documentation changes exist",
            "changelog system is initialized",
            "cross-reference system is functional"
          ],
          "post_conditions": [
            "all documentation changes are committed",
            "changelog is updated with timestamps",
            "cross-references are validated and functional"
          ],
          "error_handling": [
            {
              "error_type": "broken_internal_link",
              "strategy": "fallback",
              "action": "attempt to fix common link issues automatically",
              "escalation": false
            },
            {
              "error_type": "changelog_format_error",
              "strategy": "retry",
              "action": "reformat changelog entry according to standards",
              "escalation": false
            }
          ]
        }
      },
      "metadata": {
        "created": "2025-06-24T07:47:00Z",
        "updated": "2025-06-24T07:47:00Z",
        "version": "1.0.0",
        "complexity": "medium",
        "tags": ["documentation", "changelog", "cross-references", "synchronization"],
        "dependencies": ["git", "markdown-link-check"],
        "performance_metrics": {
          "avg_execution_time": 25.3,
          "success_rate": 0.98,
          "usage_count": 0
        }
      }
    },
    {
      "id": "efficient_command_grouping",
      "name": "Efficient Command Grouping",
      "category": "optimization",
      "description": "Groups multiple related commands into single-line executions or complex operations to reduce the number of individual command executions while maintaining logical clarity and error handling.",
      "parameters": {
        "required": [
          {
            "name": "command_list",
            "type": "array",
            "description": "List of commands to be grouped and optimized"
          }
        ],
        "optional": [
          {
            "name": "parallel_execution",
            "type": "boolean",
            "description": "Whether to execute independent commands in parallel",
            "default": false
          },
          {
            "name": "error_tolerance",
            "type": "string",
            "description": "How to handle errors in grouped commands",
            "validation": {
              "enum": ["fail_fast", "continue_on_error", "conditional"]
            },
            "default": "fail_fast"
          }
        ]
      },
      "execution": {
        "strategy": "iterative",
        "commands": [
          {
            "action": "analyze_command_dependencies",
            "description": "Analyze command relationships and dependencies to determine optimal grouping",
            "parameters": {
              "check_file_dependencies": true,
              "analyze_data_flow": true,
              "identify_side_effects": true
            }
          },
          {
            "action": "group_compatible_commands",
            "description": "Group commands that can be safely executed together",
            "parameters": {
              "use_shell_operators": true,
              "preserve_error_handling": true,
              "maintain_output_clarity": true
            }
          },
          {
            "action": "optimize_execution_order",
            "description": "Optimize the order of grouped commands for maximum efficiency",
            "parameters": {
              "prioritize_dependencies": true,
              "minimize_context_switches": true,
              "balance_resource_usage": true
            }
          },
          {
            "action": "execute_optimized_groups",
            "description": "Execute the optimized command groups with proper error handling",
            "parameters": {
              "capture_intermediate_output": true,
              "provide_progress_feedback": true,
              "handle_partial_failures": true
            }
          }
        ],
        "validation": {
          "pre_conditions": [
            "command list is not empty",
            "commands are syntactically valid",
            "execution environment is ready"
          ],
          "post_conditions": [
            "all successful commands have completed",
            "error states are properly handled",
            "execution efficiency is improved over individual execution"
          ],
          "error_handling": [
            {
              "error_type": "command_syntax_error",
              "strategy": "skip",
              "action": "log error and continue with remaining commands",
              "escalation": false
            },
            {
              "error_type": "dependency_violation",
              "strategy": "retry",
              "action": "reorder commands and retry execution",
              "escalation": false
            },
            {
              "error_type": "resource_exhaustion",
              "strategy": "fallback",
              "action": "fall back to individual command execution",
              "escalation": true
            }
          ]
        }
      },
      "metadata": {
        "created": "2025-06-24T07:47:00Z",
        "updated": "2025-06-24T07:47:00Z",
        "version": "1.0.0",
        "complexity": "high",
        "tags": ["optimization", "efficiency", "command-grouping", "performance"],
        "dependencies": ["shell", "command-analysis"],
        "performance_metrics": {
          "avg_execution_time": 15.8,
          "success_rate": 0.92,
          "usage_count": 0
        }
      }
    },
    {
      "id": "project_structure_migration",
      "name": "Project Structure Migration",
      "category": "implementation",
      "description": "Performs comprehensive project structure migrations with file moves, link updates, symlink creation for backward compatibility, and validation of the new structure integrity.",
      "parameters": {
        "required": [
          {
            "name": "source_structure",
            "type": "directory_path",
            "description": "Path to the current project structure to be migrated"
          },
          {
            "name": "target_structure",
            "type": "directory_path",
            "description": "Path to the new project structure layout"
          }
        ],
        "optional": [
          {
            "name": "create_symlinks",
            "type": "boolean",
            "description": "Whether to create symlinks for backward compatibility",
            "default": true
          },
          {
            "name": "update_internal_links",
            "type": "boolean",
            "description": "Whether to update internal markdown and reference links",
            "default": true
          },
          {
            "name": "backup_original",
            "type": "boolean",
            "description": "Whether to create a backup of the original structure",
            "default": true
          }
        ]
      },
      "execution": {
        "strategy": "sequential",
        "commands": [
          {
            "action": "create_structure_backup",
            "description": "Create a complete backup of the original structure",
            "parameters": {
              "backup_suffix": "_backup",
              "preserve_permissions": true,
              "exclude_git_data": false
            }
          },
          {
            "action": "create_target_directories",
            "description": "Create the new directory structure",
            "parameters": {
              "create_parent_dirs": true,
              "set_permissions": "inherit"
            }
          },
          {
            "action": "migrate_files_logically",
            "description": "Move files to new locations based on logical grouping",
            "parameters": {
              "preserve_git_history": true,
              "group_by_function": true,
              "maintain_relationships": true
            }
          },
          {
            "action": "update_internal_references",
            "description": "Update all internal links, imports, and references to new paths",
            "parameters": {
              "scan_file_types": ["md", "json", "ts", "js", "yaml"],
              "update_relative_paths": true,
              "preserve_external_links": true
            }
          },
          {
            "action": "create_compatibility_symlinks",
            "description": "Create symlinks from old locations to new locations",
            "parameters": {
              "symlink_critical_paths": true,
              "create_symlink_registry": true,
              "test_symlink_integrity": true
            }
          },
          {
            "action": "validate_migration_integrity",
            "description": "Comprehensive validation of the migration results",
            "parameters": {
              "check_file_integrity": true,
              "validate_links": true,
              "test_functionality": true
            }
          }
        ],
        "validation": {
          "pre_conditions": [
            "source structure exists and is accessible",
            "target structure path is valid",
            "sufficient disk space available",
            "user has necessary permissions"
          ],
          "post_conditions": [
            "all files migrated successfully",
            "internal links are functional",
            "symlinks provide backward compatibility",
            "no data loss occurred"
          ],
          "error_handling": [
            {
              "error_type": "file_permission_error",
              "strategy": "manual_intervention",
              "action": "request user to resolve permission issues",
              "escalation": true
            },
            {
              "error_type": "disk_space_insufficient",
              "strategy": "abort",
              "action": "abort migration and clean up partial changes",
              "escalation": true
            },
            {
              "error_type": "link_update_failure",
              "strategy": "fallback",
              "action": "continue migration but log failed link updates",
              "escalation": false
            }
          ]
        }
      },
      "metadata": {
        "created": "2025-06-24T07:47:00Z",
        "updated": "2025-06-24T07:47:00Z",
        "version": "1.0.0",
        "complexity": "expert",
        "tags": ["migration", "structure", "refactoring", "symlinks", "validation"],
        "dependencies": ["git", "file-system", "link-checker"],
        "performance_metrics": {
          "avg_execution_time": 120.5,
          "success_rate": 0.88,
          "usage_count": 0
        }
      }
    }
  ]
}
