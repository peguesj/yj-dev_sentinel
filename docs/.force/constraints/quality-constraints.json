{
  "constraints": [
    {
      "id": "commit_message_format",
      "name": "Commit Message Format",
      "description": "Enforce conventional commit message format for semantic versioning and automated changelog generation",
      "version": "1.0.0",
      "category": "code-quality",
      "enforcement": {
        "level": "error",
        "autoFix": false,
        "validationScope": "git commit messages",
        "frequency": "on-commit"
      },
      "validation": {
        "type": "regex",
        "rule": "^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .{1,72}$",
        "errorMessage": "Commit message must follow conventional commit format: type(scope): description",
        "severity": "error"
      },
      "remediation": {
        "instructions": "Use format: type(scope): description\\nTypes: feat, fix, docs, style, refactor, test, chore\\nExample: feat(auth): add user authentication system",
        "relatedTools": ["git_workflow_commit"]
      }
    },
    {
      "id": "code_line_length",
      "name": "Code Line Length",
      "description": "Enforce maximum line length for code readability and consistency",
      "version": "1.0.0",
      "category": "code-quality",
      "enforcement": {
        "level": "warning",
        "autoFix": true,
        "validationScope": "**/*.py",
        "frequency": "on-save"
      },
      "validation": {
        "type": "function",
        "rule": "check_line_length_88",
        "errorMessage": "Line exceeds maximum length of 88 characters",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Break long lines using proper Python line continuation or refactor complex expressions",
        "autoFixCommand": "black --line-length 88",
        "relatedTools": ["code_quality_check"]
      }
    },
    {
      "id": "documentation_completeness",
      "name": "Documentation Completeness",
      "description": "Ensure all public functions and classes have proper documentation",
      "version": "1.0.0",
      "category": "documentation",
      "enforcement": {
        "level": "warning",
        "autoFix": false,
        "validationScope": "**/*.py",
        "frequency": "on-commit"
      },
      "validation": {
        "type": "function",
        "rule": "check_docstring_coverage",
        "errorMessage": "Public function or class missing docstring",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Add docstrings to all public functions and classes following Google or NumPy style",
        "relatedTools": ["documentation_analysis"]
      }
    },
    {
      "id": "import_organization",
      "name": "Import Organization",
      "description": "Enforce proper import organization and sorting",
      "version": "1.0.0",
      "category": "code-quality",
      "enforcement": {
        "level": "warning",
        "autoFix": true,
        "validationScope": "**/*.py",
        "frequency": "on-save"
      },
      "validation": {
        "type": "command",
        "rule": "isort --check-only --diff",
        "errorMessage": "Imports are not properly organized",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Organize imports: standard library, third-party, local imports with blank lines between groups",
        "autoFixCommand": "isort",
        "relatedTools": ["code_quality_check"]
      }
    },
    {
      "id": "no_debug_statements",
      "name": "No Debug Statements",
      "description": "Prevent debug statements from being committed to version control",
      "version": "1.0.0",
      "category": "code-quality",
      "enforcement": {
        "level": "error",
        "autoFix": false,
        "validationScope": "**/*.py",
        "frequency": "on-commit"
      },
      "validation": {
        "type": "regex",
        "rule": "print\\(|pprint\\(|pdb\\.set_trace\\(|breakpoint\\(|console\\.log\\(",
        "errorMessage": "Debug statements found in code",
        "severity": "error"
      },
      "remediation": {
        "instructions": "Remove or replace debug statements with proper logging",
        "relatedTools": ["code_quality_check"]
      }
    },
    {
      "id": "test_coverage_minimum",
      "name": "Minimum Test Coverage",
      "description": "Ensure minimum test coverage threshold is maintained",
      "version": "1.0.0",
      "category": "testing",
      "enforcement": {
        "level": "warning",
        "autoFix": false,
        "validationScope": "test coverage report",
        "frequency": "on-push"
      },
      "validation": {
        "type": "function",
        "rule": "check_coverage_threshold_80",
        "errorMessage": "Test coverage below minimum threshold of 80%",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Add tests to increase coverage above 80% threshold",
        "relatedTools": ["test_runner", "coverage_analysis"]
      }
    },
    {
      "id": "schema_validation",
      "name": "Schema Validation",
      "description": "Ensure all Force components validate against their schemas",
      "version": "1.0.0",
      "category": "compliance",
      "enforcement": {
        "level": "error",
        "autoFix": false,
        "validationScope": "docs/.force/**/*.json",
        "frequency": "on-save"
      },
      "validation": {
        "type": "schema",
        "rule": "force-schema.json",
        "errorMessage": "Force component does not validate against schema",
        "severity": "error"
      },
      "remediation": {
        "instructions": "Fix schema validation errors in Force component definitions",
        "relatedTools": ["schema_validator"]
      }
    },
    {
      "id": "security_best_practices",
      "name": "Security Best Practices",
      "description": "Enforce basic security best practices in code",
      "version": "1.0.0",
      "category": "security",
      "enforcement": {
        "level": "error",
        "autoFix": false,
        "validationScope": "**/*.py",
        "frequency": "on-commit"
      },
      "validation": {
        "type": "function",
        "rule": "check_security_patterns",
        "errorMessage": "Security vulnerability detected",
        "severity": "error"
      },
      "remediation": {
        "instructions": "Review and fix security issues such as hardcoded secrets, SQL injection risks, or unsafe deserialization",
        "relatedTools": ["security_scanner"]
      }
    },
    {
      "id": "force_component_metadata",
      "name": "Force Component Metadata",
      "description": "Ensure all Force components have complete metadata",
      "version": "1.0.0",
      "category": "compliance",
      "enforcement": {
        "level": "warning",
        "autoFix": false,
        "validationScope": "docs/.force/**/*.json",
        "frequency": "on-save"
      },
      "validation": {
        "type": "function",
        "rule": "check_component_metadata_completeness",
        "errorMessage": "Force component missing required metadata fields",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Add missing metadata fields: author, created, modified, tags, version",
        "relatedTools": ["metadata_validator"]
      }
    },
    {
      "id": "api_documentation_sync",
      "name": "API Documentation Synchronization",
      "description": "Ensure API documentation stays synchronized with implementation",
      "version": "1.0.0",
      "category": "documentation",
      "enforcement": {
        "level": "warning",
        "autoFix": false,
        "validationScope": "docs/api/**/*.md",
        "frequency": "on-commit"
      },
      "validation": {
        "type": "function",
        "rule": "check_api_doc_sync",
        "errorMessage": "API documentation out of sync with implementation",
        "severity": "warning"
      },
      "remediation": {
        "instructions": "Update API documentation to match current implementation",
        "relatedTools": ["documentation_analysis", "api_doc_generator"]
      }
    }
  ]
}
