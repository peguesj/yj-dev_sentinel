{
  "governance": [
    {
      "id": "development_quality_gates",
      "name": "Development Quality Gates",
      "description": "Quality gates for development workflow to ensure code quality and project standards",
      "version": "1.0.0",
      "scope": "project",
      "rules": [
        {
          "condition": "commit_attempt AND has_uncommitted_changes",
          "action": "require-approval",
          "message": "All changes must pass quality checks before commit"
        },
        {
          "condition": "pull_request_created",
          "action": "require-approval",
          "message": "Pull requests require code review and quality gate approval"
        },
        {
          "condition": "test_coverage < 80",
          "action": "warn",
          "message": "Test coverage below recommended threshold of 80%"
        },
        {
          "condition": "security_scan_failed",
          "action": "deny",
          "message": "Security vulnerabilities must be resolved before merge"
        }
      ],
      "qualityGates": [
        {
          "name": "code_quality_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "run_linters_and_formatters",
              "errorMessage": "Code quality checks failed",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "check_test_coverage",
              "errorMessage": "Insufficient test coverage",
              "severity": "warning"
            }
          ],
          "required": true
        },
        {
          "name": "documentation_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "validate_documentation_completeness",
              "errorMessage": "Documentation incomplete or inaccurate",
              "severity": "warning"
            },
            {
              "type": "function",
              "rule": "check_api_documentation",
              "errorMessage": "API documentation out of sync",
              "severity": "warning"
            }
          ],
          "required": false
        },
        {
          "name": "security_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "security_vulnerability_scan",
              "errorMessage": "Security vulnerabilities detected",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "check_dependency_vulnerabilities",
              "errorMessage": "Vulnerable dependencies detected",
              "severity": "error"
            }
          ],
          "required": true
        }
      ]
    },
    {
      "id": "force_component_governance",
      "name": "Force Component Governance",
      "description": "Governance policies for Force system components to ensure consistency and quality",
      "version": "1.0.0",
      "scope": "system",
      "rules": [
        {
          "condition": "force_component_added OR force_component_modified",
          "action": "require-approval",
          "message": "Force components must validate against schema and pass review"
        },
        {
          "condition": "schema_validation_failed",
          "action": "deny",
          "message": "Force components must validate against master schema"
        },
        {
          "condition": "breaking_change_detected",
          "action": "require-approval",
          "message": "Breaking changes require explicit approval and migration plan"
        }
      ],
      "qualityGates": [
        {
          "name": "schema_validation_gate",
          "criteria": [
            {
              "type": "schema",
              "rule": "force-schema.json",
              "errorMessage": "Component does not validate against Force schema",
              "severity": "error"
            }
          ],
          "required": true
        },
        {
          "name": "component_completeness_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "check_component_metadata",
              "errorMessage": "Component missing required metadata",
              "severity": "warning"
            },
            {
              "type": "function",
              "rule": "check_component_documentation",
              "errorMessage": "Component lacks adequate documentation",
              "severity": "warning"
            }
          ],
          "required": false
        },
        {
          "name": "backward_compatibility_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "check_backward_compatibility",
              "errorMessage": "Breaking changes detected without proper versioning",
              "severity": "error"
            }
          ],
          "required": true
        }
      ]
    },
    {
      "id": "tool_execution_governance",
      "name": "Tool Execution Governance",
      "description": "Governance policies for tool execution to ensure safety and performance",
      "version": "1.0.0",
      "scope": "session",
      "rules": [
        {
          "condition": "tool_execution_requested AND tool_risk_level = 'high'",
          "action": "require-approval",
          "message": "High-risk tools require explicit user approval"
        },
        {
          "condition": "execution_timeout_exceeded",
          "action": "deny",
          "message": "Tool execution timeout exceeded - operation cancelled"
        },
        {
          "condition": "resource_usage_critical",
          "action": "warn",
          "message": "Tool execution is using significant system resources"
        },
        {
          "condition": "concurrent_executions > 5",
          "action": "deny",
          "message": "Too many concurrent tool executions - please wait"
        }
      ],
      "qualityGates": [
        {
          "name": "pre_execution_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "validate_tool_parameters",
              "errorMessage": "Tool parameters validation failed",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "check_execution_permissions",
              "errorMessage": "Insufficient permissions for tool execution",
              "severity": "error"
            }
          ],
          "required": true
        },
        {
          "name": "resource_availability_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "check_system_resources",
              "errorMessage": "Insufficient system resources for tool execution",
              "severity": "warning"
            }
          ],
          "required": false
        }
      ]
    },
    {
      "id": "learning_data_governance",
      "name": "Learning Data Governance",
      "description": "Governance policies for learning data collection and usage",
      "version": "1.0.0",
      "scope": "system",
      "rules": [
        {
          "condition": "personal_data_detected",
          "action": "deny",
          "message": "Personal data cannot be included in learning records"
        },
        {
          "condition": "learning_data_size > 1GB",
          "action": "warn",
          "message": "Learning data size exceeds recommended limits - consider archiving"
        },
        {
          "condition": "sensitive_information_detected",
          "action": "deny",
          "message": "Sensitive information detected in learning data"
        }
      ],
      "qualityGates": [
        {
          "name": "data_privacy_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "scan_for_personal_data",
              "errorMessage": "Personal data found in learning records",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "scan_for_sensitive_info",
              "errorMessage": "Sensitive information found in learning records",
              "severity": "error"
            }
          ],
          "required": true
        },
        {
          "name": "data_quality_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "validate_learning_record_schema",
              "errorMessage": "Learning record does not conform to schema",
              "severity": "error"
            }
          ],
          "required": true
        }
      ]
    },
    {
      "id": "deployment_governance",
      "name": "Deployment Governance",
      "description": "Governance policies for system deployment and updates",
      "version": "1.0.0",
      "scope": "system",
      "rules": [
        {
          "condition": "production_deployment_requested",
          "action": "require-approval",
          "message": "Production deployments require explicit approval"
        },
        {
          "condition": "breaking_changes_in_deployment",
          "action": "require-approval",
          "message": "Breaking changes require migration plan and approval"
        },
        {
          "condition": "security_vulnerabilities_present",
          "action": "deny",
          "message": "Cannot deploy with known security vulnerabilities"
        }
      ],
      "qualityGates": [
        {
          "name": "pre_deployment_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "run_full_test_suite",
              "errorMessage": "Full test suite must pass before deployment",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "security_scan_clean",
              "errorMessage": "Security scan must be clean before deployment",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "performance_benchmarks_met",
              "errorMessage": "Performance benchmarks not met",
              "severity": "warning"
            }
          ],
          "required": true
        },
        {
          "name": "compatibility_gate",
          "criteria": [
            {
              "type": "function",
              "rule": "check_api_compatibility",
              "errorMessage": "API compatibility issues detected",
              "severity": "error"
            },
            {
              "type": "function",
              "rule": "check_dependency_compatibility",
              "errorMessage": "Dependency compatibility issues detected",
              "severity": "warning"
            }
          ],
          "required": true
        }
      ]
    }
  ]
}
