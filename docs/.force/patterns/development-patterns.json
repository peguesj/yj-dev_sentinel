{
  "patterns": [
    {
      "id": "agent_development_workflow",
      "name": "Agent Development Workflow",
      "description": "Complete workflow pattern for developing and deploying autonomous agents with proper documentation, testing, and version control",
      "version": "1.0.0",
      "category": "workflow",
      "applicability": {
        "projectTypes": ["python-package", "service", "agent-system"],
        "contexts": [
          {
            "projectPhase": "development",
            "complexityLevel": "medium"
          },
          {
            "projectPhase": "development",
            "complexityLevel": "high"
          }
        ]
      },
      "implementation": {
        "steps": [
          {
            "name": "analyze_project_structure",
            "description": "Analyze current project structure and identify areas for improvement",
            "toolId": "project_structure_analysis",
            "parameters": {
              "projectType": "python-package",
              "checkNaming": true,
              "checkStructure": true,
              "suggestImprovements": true
            }
          },
          {
            "name": "create_feature_branch",
            "description": "Create a new feature branch for agent development",
            "toolId": "git_branch_create",
            "parameters": {
              "branchType": "feature",
              "baseBranch": "main",
              "switchToBranch": true
            },
            "conditionalLogic": "if current_branch == 'main' and has_uncommitted_changes == false"
          },
          {
            "name": "analyze_documentation",
            "description": "Analyze existing documentation for completeness and accuracy",
            "toolId": "documentation_analysis",
            "parameters": {
              "checkLinks": true,
              "checkCodeExamples": true,
              "generateReport": true
            }
          },
          {
            "name": "code_quality_check",
            "description": "Perform comprehensive code quality analysis",
            "toolId": "code_quality_check",
            "parameters": {
              "linters": ["flake8", "mypy", "pylint"],
              "autoFix": false,
              "generateReport": true
            }
          },
          {
            "name": "commit_changes",
            "description": "Commit changes with proper semantic versioning",
            "toolId": "git_workflow_commit",
            "parameters": {
              "scope": "feature",
              "semanticVersionIncrement": "minor"
            },
            "conditionalLogic": "if has_uncommitted_changes == true and quality_checks_passed == true"
          }
        ],
        "expectedOutcomes": [
          "Clean project structure following best practices",
          "Comprehensive and accurate documentation",
          "High code quality with minimal technical debt",
          "Proper version control with semantic commits",
          "Automated quality gates and validation"
        ]
      },
      "metrics": {
        "successRate": 0.95,
        "averageExecutionTime": 180.0,
        "usageCount": 45
      }
    },
    {
      "id": "mcp_integration_pattern",
      "name": "MCP Integration Pattern",
      "description": "Pattern for integrating components with Model Context Protocol (MCP) servers for VS Code compatibility",
      "version": "1.0.0",
      "category": "architecture",
      "applicability": {
        "projectTypes": ["python-package", "service", "tool"],
        "contexts": [
          {
            "projectPhase": "development",
            "complexityLevel": "medium"
          }
        ]
      },
      "implementation": {
        "steps": [
          {
            "name": "analyze_mcp_requirements",
            "description": "Analyze current codebase for MCP integration requirements",
            "toolId": "project_structure_analysis",
            "parameters": {
              "projectType": "service"
            }
          },
          {
            "name": "validate_tool_schemas",
            "description": "Validate all tool definitions against Force schemas",
            "toolId": "code_quality_check",
            "parameters": {
              "targetFiles": ["docs/.force/tools/*.json"],
              "linters": ["jsonschema"]
            }
          },
          {
            "name": "generate_mcp_server",
            "description": "Generate MCP server implementation with Force integration",
            "toolId": "code_generation",
            "parameters": {
              "template": "force_mcp_server",
              "outputFile": "integration/fast_agent/force_mcp_server.py"
            }
          },
          {
            "name": "test_mcp_integration",
            "description": "Test MCP server functionality and VS Code integration",
            "toolId": "integration_test",
            "parameters": {
              "testSuite": "mcp_integration",
              "environment": "development"
            }
          }
        ],
        "expectedOutcomes": [
          "Fully functional MCP server with Force integration",
          "Schema-validated tool definitions",
          "VS Code compatibility with proper tool exposure",
          "Comprehensive error handling and validation"
        ]
      }
    },
    {
      "id": "documentation_sync_pattern",
      "name": "Documentation Synchronization Pattern",
      "description": "Pattern for keeping documentation synchronized with code changes and ensuring accuracy",
      "version": "1.0.0",
      "category": "documentation",
      "applicability": {
        "projectTypes": ["python-package", "web-app", "library"],
        "contexts": [
          {
            "projectPhase": "development",
            "complexityLevel": "low"
          },
          {
            "projectPhase": "development",
            "complexityLevel": "medium"
          }
        ]
      },
      "implementation": {
        "steps": [
          {
            "name": "analyze_code_changes",
            "description": "Analyze recent code changes for documentation impact",
            "toolId": "git_diff_analysis",
            "parameters": {
              "sinceCommit": "HEAD~5",
              "focusAreas": ["api", "interfaces", "public_methods"]
            }
          },
          {
            "name": "check_documentation_accuracy",
            "description": "Check documentation accuracy against current implementation",
            "toolId": "documentation_analysis",
            "parameters": {
              "checkCodeExamples": true,
              "checkLinks": true,
              "targetFiles": ["README.md", "docs/**/*.md"]
            }
          },
          {
            "name": "update_documentation",
            "description": "Update documentation to reflect code changes",
            "toolId": "documentation_update",
            "parameters": {
              "autoUpdate": true,
              "reviewRequired": true
            }
          },
          {
            "name": "commit_documentation_updates",
            "description": "Commit documentation updates with proper messaging",
            "toolId": "git_workflow_commit",
            "parameters": {
              "scope": "docs",
              "semanticVersionIncrement": "patch"
            }
          }
        ],
        "expectedOutcomes": [
          "Documentation accurately reflects current implementation",
          "All code examples are tested and functional",
          "Internal links are valid and properly maintained",
          "Consistent documentation style and formatting"
        ]
      }
    },
    {
      "id": "continuous_integration_pattern",
      "name": "Continuous Integration Pattern",
      "description": "Pattern for setting up and maintaining continuous integration with quality gates",
      "version": "1.0.0",
      "category": "deployment",
      "applicability": {
        "projectTypes": ["python-package", "web-app", "service"],
        "contexts": [
          {
            "projectPhase": "development",
            "complexityLevel": "medium"
          },
          {
            "projectPhase": "testing",
            "complexityLevel": "high"
          }
        ]
      },
      "implementation": {
        "steps": [
          {
            "name": "setup_quality_gates",
            "description": "Configure quality gates for code review and deployment",
            "toolId": "ci_configuration",
            "parameters": {
              "platform": "github-actions",
              "qualityChecks": ["lint", "test", "security", "documentation"]
            }
          },
          {
            "name": "configure_automated_testing",
            "description": "Set up automated testing with coverage requirements",
            "toolId": "test_configuration",
            "parameters": {
              "testFramework": "pytest",
              "coverageThreshold": 80,
              "includeIntegrationTests": true
            }
          },
          {
            "name": "setup_deployment_pipeline",
            "description": "Configure deployment pipeline with proper staging",
            "toolId": "deployment_configuration",
            "parameters": {
              "stages": ["test", "staging", "production"],
              "approvalRequired": true
            }
          }
        ],
        "expectedOutcomes": [
          "Automated quality checks on every pull request",
          "Comprehensive test coverage with automated reporting",
          "Secure deployment pipeline with proper controls",
          "Consistent code quality across all contributions"
        ]
      }
    }
  ]
}
